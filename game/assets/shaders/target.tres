[gd_resource type="ShaderMaterial" load_steps=15 format=2]

[sub_resource type="VisualShaderNodeScalarFunc" id=1]
output_port_for_preview = 0
function = 17

[sub_resource type="VisualShaderNodeColorConstant" id=2]
constant = Color( 1, 1, 0, 1 )

[sub_resource type="VisualShaderNodeVectorDecompose" id=3]
output_port_for_preview = 1

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=5]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=6]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarUniform" id=13]
uniform_name = "opacity"

[sub_resource type="VisualShaderNodeScalarOp" id=14]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=7]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=8]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 10.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorDecompose" id=9]
output_port_for_preview = 1

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=11]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShader" id=12]
code = "shader_type spatial;
render_mode cull_disabled;

uniform float opacity;



void vertex() {
// Output:0

}

void fragment() {
// Color:14
	vec3 n_out14p0 = vec3(1.000000, 1.000000, 0.000000);
	float n_out14p1 = 1.000000;

// ScalarUniform:20
	float n_out20p0 = opacity;

// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// VectorDecompose:7
	float n_out7p0 = n_out3p0.x;
	float n_out7p1 = n_out3p0.y;
	float n_out7p2 = n_out3p0.z;

// ScalarOp:5
	float n_in5p1 = 10.00000;
	float n_out5p0 = n_out7p1 * n_in5p1;

// Input:8
	float n_out8p0 = TIME;

// ScalarOp:9
	float n_out9p0 = n_out5p0 - n_out8p0;

// ScalarFunc:10
	float n_out10p0 = fract(n_out9p0);

// Input:16
	vec3 n_out16p0 = vec3(UV, 0.0);

// VectorDecompose:15
	float n_out15p0 = n_out16p0.x;
	float n_out15p1 = n_out16p0.y;
	float n_out15p2 = n_out16p0.z;

// ScalarOp:17
	float n_out17p0 = n_out10p0 * n_out15p1;

// ScalarOp:21
	float n_out21p0 = n_out20p0 * n_out17p0;

// VectorCompose:19
	float n_in19p2 = 0.00000;
	vec3 n_out19p0 = vec3(n_out17p0, n_out17p0, n_in19p2);

// Output:0
	ALBEDO = n_out14p0;
	ALPHA = n_out21p0;
	EMISSION = n_out19p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1145.5, 0 )
modes/cull = 2
nodes/fragment/0/position = Vector2( 1200, 80 )
nodes/fragment/3/node = SubResource( 7 )
nodes/fragment/3/position = Vector2( -420, 80 )
nodes/fragment/5/node = SubResource( 8 )
nodes/fragment/5/position = Vector2( 20, 80 )
nodes/fragment/7/node = SubResource( 9 )
nodes/fragment/7/position = Vector2( -200, 80 )
nodes/fragment/8/node = SubResource( 10 )
nodes/fragment/8/position = Vector2( 20, 320 )
nodes/fragment/9/node = SubResource( 11 )
nodes/fragment/9/position = Vector2( 240, 80 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 460, 80 )
nodes/fragment/14/node = SubResource( 2 )
nodes/fragment/14/position = Vector2( 740, 80 )
nodes/fragment/15/node = SubResource( 3 )
nodes/fragment/15/position = Vector2( 460, 280 )
nodes/fragment/16/node = SubResource( 4 )
nodes/fragment/16/position = Vector2( 260, 340 )
nodes/fragment/17/node = SubResource( 5 )
nodes/fragment/17/position = Vector2( 740, 260 )
nodes/fragment/19/node = SubResource( 6 )
nodes/fragment/19/position = Vector2( 960, 320 )
nodes/fragment/20/node = SubResource( 13 )
nodes/fragment/20/position = Vector2( 740, 180 )
nodes/fragment/21/node = SubResource( 14 )
nodes/fragment/21/position = Vector2( 960, 180 )
nodes/fragment/connections = PoolIntArray( 3, 0, 7, 0, 5, 0, 9, 0, 7, 1, 5, 0, 16, 0, 15, 0, 15, 1, 17, 1, 8, 0, 9, 1, 17, 0, 19, 0, 17, 0, 19, 1, 10, 0, 17, 0, 9, 0, 10, 0, 19, 0, 0, 5, 14, 0, 0, 0, 17, 0, 21, 1, 21, 0, 0, 1, 20, 0, 21, 0 )

[resource]
shader = SubResource( 12 )
shader_param/opacity = null
